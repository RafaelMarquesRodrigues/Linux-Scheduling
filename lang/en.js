langStrings["en"] = new Array();
langStrings["en"].language = "English";
langStrings["en"].document_title = "Linux Scheduling";
langStrings["en"].menu1 = "Home";
langStrings["en"].menu2 = "Start";
langStrings["en"].menu3 = "Instructions";
langStrings["en"].menu4 = "Learn more";
langStrings["en"].menu5 = "About";
langStrings["en"].index_title = "Linux Scheduling !";
langStrings["en"].index_subtitle = "An open source educational resource about the O(1) Linux process scheduling algorithm.";
langStrings["en"].index_btn1 = "Start";
langStrings["en"].index_btn2 = "Instructions";
langStrings["en"].index_btn3 = "Learn more";
langStrings["en"].index_btn4 = "About";
langStrings["en"].processQuant = "<option disabled>Select the amount of processes</option><option value=\"1\">1</option><option value=\"2\" selected=\"selected\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option>";
langStrings["en"].gindex_1 = "Automatic";
langStrings["en"].gindex_2 = "Step By Step";
langStrings["en"].gindex_3 = "Ready";
langStrings["en"].gindex_4 = "Aleatory";
langStrings["en"].gindex_5 = "CPU bounded";
langStrings["en"].gindex_6 = "I/O bounded";
langStrings["en"].game1 = "Starting sheduling...";
langStrings["en"].statisticsButton = "Statistics";
langStrings["en"].helpButton = "Help";
langStrings["en"].game2 = "Executing process";
langStrings["en"].game3 = "Blocked processes";
langStrings["en"].game4 = "Ready vector";
langStrings["en"].game5 = "Expired vector";
langStrings["en"].myModalLabel = "Statistics";
langStrings["en"].myModalLabel2 = "Help";
langStrings["en"].game6 = "Process information";
langStrings["en"].game7 = "Time used (or FIFO, if FIFO scheduling is being used) / quantum | Time left";
langStrings["en"].game8 = "Priority";
langStrings["en"].game9 = "I/O time left";
langStrings["en"].game10 = "Step by step mode";
langStrings["en"].game11 = "If on step by step mode, press <span class='glyphicon glyphicon-triangle-right' aria-hidden='true'></span> to execute the next step.";
langStrings["en"].game12 = "Some information about the events are shown a few milliseconds after they happen. Click the <span class='label label-primary'>Log</span> button to see more clearly all past events.";
langStrings["en"].learnMoreTexto = "<h1>More information about this system:</h1>&nbsp;&nbsp;&nbsp;&nbsp;The O(1) algorithm used by Linux have the main property of change the processes' pointers that are in the <b>expired list</b> with the processes' pointers that are in the <b>active list</b>. The processes are in lists (execution, blocked, ready or expired) e are switched as the schedule algorithm determinate. When a process finish its quantum it is moved to the expired processes list. After all active processes are finished, the active list's pointer and the expired list's pointer switch places, making new processes being processed.<br>&nbsp;&nbsp;&nbsp;&nbsp;The Linux scheduling is based in threads, in the different modes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Real time FIFO;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Round-Robin in real time;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Round-Robin in time share;<br>&nbsp;&nbsp;&nbsp;&nbsp;The Linux differs internally 140 priority levels, where from <b>0 to 99</b> are for real time threads and from <b>100 to 139</b> are to convencional threads. The smaller the level, bigger its priority. Also the process scheduling policy must be chosen:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-FIFO: A process with this priority is simply scheduled, respecting the first in first out rule , without preemption, leaving the CPU when it wishes.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Round-Robin: This propertie respect the rule that the processes are scheduled and executed until they use their entire quantum or being blocked by a I/O requisition.";
langStrings["en"].instructionsTexto = "<h1>Instructions to start the simulation of the scheduling :</h1>&nbsp;&nbsp;&nbsp;&nbsp;<b>1.</b> At menu, click in Start to enter the Linux Scheduling Simulator;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>2.</b> Entering the simulator, first choose a quantity of processes that you want to simulate the scheduling;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>3.</b> The next phase is choose how the steps will occur: Step-by-step or automatically. When the option Automatic is chosen the steps will be executed without interruptions, and when the option Step-by-step is chosen is needed to press the arrow button to continue.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>4.</b> After choose the number of processes and how tey will be simulated is possible choose two options:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Fill the processes specifications:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The priority, the necessary time to complete the execution, the scheduling type (FIFO or Round-Robin), the necessary time to execute an I/O request, the process chance to requisite ana I/O request and the process chance to leave the CPU.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;After that, click on the 'ready' button to start the simulation.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Automatic fill of each process specification:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Here we have three modes:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-The Aleatory one fill random the processes specifications.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-The CPU Bounded one fill the specifications with low I/O requests and low execution time.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-The I/O Bounded one fill the specifications with high I/O requests and high execution time.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>5.</b> Done! Now the simulation was started. Let us explain some extra functions in execution:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-In the left painel will be shown the events description while they will occur;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Select the Log button to verify all the descriptions that were shown;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Select the Statistics button to show some CPU data;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Select the Help button case anything is unclear over the execution.<br>";
langStrings["en"].about1 = "This OERs (Open Educational Resources) it was made by students of the ICMC -USP, Gabriel Luiz F. Souto, Julia M. Macias e Rafael Marques, developed as a job for the discipline of Operating Systems I given by Professor Paulo Sergio ";
langStrings["en"].btn_game1 = "Starts a new simulation with random processses";
langStrings["en"].btn_game2 = "Starts a new simulation with CPU bounded processes";
langStrings["en"].btn_game3 = "Starts a new simulation with I/O bounded processses";
langStrings["en"].btn_game4 = "CPU statistics";
langStrings["en"].btn_game5 = "Help ! (?)";
langStrings["en"].btn_readyGame = "Click here when finished to insert all dats of the process";
langStrings["en"].info = "Current event";
langStrings["en"].nextStep = "Next step";